{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6647464,"sourceType":"datasetVersion","datasetId":2093102}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sureshvj/03-text-classification-based-on-ecomers-product?scriptVersionId=198603302\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# Data Link: https://www.kaggle.com/datasets/saurabhshahane/ecommerce-text-classification\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer, TfidfTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import pyplot as plt\nimport seaborn as sbn\nimport pandas as pd \nimport numpy as np \nimport spacy\nimport os\nimport re\n\n\n\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-25T15:15:09.554498Z","iopub.execute_input":"2024-09-25T15:15:09.554974Z","iopub.status.idle":"2024-09-25T15:15:09.578913Z","shell.execute_reply.started":"2024-09-25T15:15:09.554917Z","shell.execute_reply":"2024-09-25T15:15:09.577712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1. Data Loading: ","metadata":{}},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/ecommerce-text-classification/ecommerceDataset.csv\",\n                   names=['target', 'text'])\ndata.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:09.580643Z","iopub.execute_input":"2024-09-25T15:15:09.581005Z","iopub.status.idle":"2024-09-25T15:15:10.081227Z","shell.execute_reply.started":"2024-09-25T15:15:09.580937Z","shell.execute_reply":"2024-09-25T15:15:10.080025Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 2. Data Explore: ","metadata":{}},{"cell_type":"code","source":"display(data.head())\nprint(f\"Data size: {data.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:10.08274Z","iopub.execute_input":"2024-09-25T15:15:10.083239Z","iopub.status.idle":"2024-09-25T15:15:10.095731Z","shell.execute_reply.started":"2024-09-25T15:15:10.083188Z","shell.execute_reply":"2024-09-25T15:15:10.094512Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['target'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:10.099058Z","iopub.execute_input":"2024-09-25T15:15:10.100091Z","iopub.status.idle":"2024-09-25T15:15:10.116818Z","shell.execute_reply.started":"2024-09-25T15:15:10.100014Z","shell.execute_reply":"2024-09-25T15:15:10.11565Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:10.118188Z","iopub.execute_input":"2024-09-25T15:15:10.118631Z","iopub.status.idle":"2024-09-25T15:15:10.140664Z","shell.execute_reply.started":"2024-09-25T15:15:10.118587Z","shell.execute_reply":"2024-09-25T15:15:10.139592Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15,5))\nsbn.countplot(data, x = 'target')\nplt.xticks()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:10.142215Z","iopub.execute_input":"2024-09-25T15:15:10.142628Z","iopub.status.idle":"2024-09-25T15:15:10.431698Z","shell.execute_reply.started":"2024-09-25T15:15:10.142589Z","shell.execute_reply":"2024-09-25T15:15:10.430506Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(data['target'][50421])\ndata['text'][50421]\ninput_text = data['text'][0]","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:10.433102Z","iopub.execute_input":"2024-09-25T15:15:10.433474Z","iopub.status.idle":"2024-09-25T15:15:10.439877Z","shell.execute_reply.started":"2024-09-25T15:15:10.433434Z","shell.execute_reply":"2024-09-25T15:15:10.438654Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3. Data Cleaning\n1. Remove null values.\n2. Remove extra spaces.\n3. Remove special characters.\n4. Converting to lowercase.\n","metadata":{}},{"cell_type":"code","source":"data = data.dropna(subset=['text'],axis=0)\ndata.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:10.44158Z","iopub.execute_input":"2024-09-25T15:15:10.442046Z","iopub.status.idle":"2024-09-25T15:15:10.480363Z","shell.execute_reply.started":"2024-09-25T15:15:10.442006Z","shell.execute_reply":"2024-09-25T15:15:10.479252Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def data_cleaning(text):\n    \n    # Step 1: Remove non-alphanumeric characters\n    cleaned_text = re.sub(r\"[^a-zA-Z0-9\\s]\", \"\", text)\n    # Step 2: Remove extra spaces\n    cleaned_text = re.sub(r\"\\s+\", \" \", cleaned_text).strip()\n    \n    return cleaned_text.lower()\n\ndata.loc[:,'text'] = data['text'].apply(data_cleaning)\n\ndisplay(data.head())\ndata['text'][5]","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:10.481651Z","iopub.execute_input":"2024-09-25T15:15:10.48203Z","iopub.status.idle":"2024-09-25T15:15:15.138905Z","shell.execute_reply.started":"2024-09-25T15:15:10.481986Z","shell.execute_reply":"2024-09-25T15:15:15.137823Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def encode_target(column):\n    \n    # Creating LabelEncoder object\n    le = LabelEncoder()\n    # Encoding the column\n    data[column] = le.fit_transform(data[column])\n    \n# Calling encode_target function to encode the 'target' column.\nencode_target('target')\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:15.143043Z","iopub.execute_input":"2024-09-25T15:15:15.143404Z","iopub.status.idle":"2024-09-25T15:15:15.170827Z","shell.execute_reply.started":"2024-09-25T15:15:15.143368Z","shell.execute_reply":"2024-09-25T15:15:15.169714Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Defining the TF-IDF algorithm.\ntfidf = TfidfVectorizer(stop_words='english')\n\n# Performing vectorizaton\ntext_vectors = tfidf.fit_transform(data['text'])","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:15.172259Z","iopub.execute_input":"2024-09-25T15:15:15.172686Z","iopub.status.idle":"2024-09-25T15:15:21.959392Z","shell.execute_reply.started":"2024-09-25T15:15:15.172645Z","shell.execute_reply":"2024-09-25T15:15:21.958322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Spliting data\nx_train, x_test, y_train, y_test = train_test_split(text_vectors,data['target'], test_size=0.3, random_state=42)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:21.960715Z","iopub.execute_input":"2024-09-25T15:15:21.961127Z","iopub.status.idle":"2024-09-25T15:15:21.987279Z","shell.execute_reply.started":"2024-09-25T15:15:21.961089Z","shell.execute_reply":"2024-09-25T15:15:21.98603Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 4. Train Model","metadata":{}},{"cell_type":"markdown","source":"\n## OneVsRestClassifier (OvR)\nThe ***OneVsRestClassifier (OvR)*** is a strategy in machine learning used for **multiclass classification problems**. In multiclass classification, where a model has to predict one class out of multiple possible classes, some algorithms like support vector machines (SVM) or logistic regression are natively binary classifiers. OneVsRestClassifier helps in extending these binary classifiers to handle multiclass problems.\n\n### Hereâ€™s how it works:\n> One-vs-Rest (OvR) trains one classifier per class, such that for each classifier, that class is treated as the positive class (class 1), and all the other classes are treated as the negative class (class 0). \n> During prediction, the classifier with the highest confidence score is selected as the predicted class.\n\n### Use Cases:\n> It is often used with binary classifiers like Logistic Regression, Support Vector Machines (SVM), Naive Bayes, etc., for multiclass classification problems.\n\n### Example:\n> If you have a dataset with three classes (A, B, C), OneVsRest would train:\n\n>> 1. A classifier to distinguish class A from not-A (B and C),\n>> 2. A classifier to distinguish class B from not-B (A and C),\n>> 3. A classifier to distinguish class C from not-C (A and B).\n>> 4. Each classifier is trained independently, and at **prediction time**, the classifier with the highest score is chosen as the final prediction.\n\n### Advantages:\n> 1. It is simple and works well with many binary classifiers.\n> 2. Can be more efficient than training a truly multiclass model in some cases.\n### Disadvantages:\n> 1. Overlapping classifiers can lead to ambiguity in predictions.\n> 2. Requires training multiple classifiers, which can increase computational complexity for a large number of classes.","metadata":{}},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.metrics import accuracy_score\n\novr_knn = OneVsRestClassifier(KNeighborsClassifier())\novr_knn.fit(x_train, y_train)\ny_pred = ovr_knn.predict(x_test)\n\nprint(accuracy_score(y_pred, y_test))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T15:15:21.988698Z","iopub.execute_input":"2024-09-25T15:15:21.989116Z","iopub.status.idle":"2024-09-25T16:03:23.893727Z","shell.execute_reply.started":"2024-09-25T15:15:21.989075Z","shell.execute_reply":"2024-09-25T16:03:23.892157Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pickle\n\npickle.dump(tfidf, open('tfidf.pkl','wb'))\npickle.dump(ovr_knn, open('ovr_knn.pkl', 'wb'))","metadata":{"execution":{"iopub.status.busy":"2024-09-25T16:04:03.876104Z","iopub.execute_input":"2024-09-25T16:04:03.876573Z","iopub.status.idle":"2024-09-25T16:04:04.173361Z","shell.execute_reply.started":"2024-09-25T16:04:03.876529Z","shell.execute_reply":"2024-09-25T16:04:04.171971Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"input_text\n\nclf = pickle.load(open('ovr_knn.pkl','rb'))\ncleaned_input_text = data_cleaning(input_text)\nvectorized_input_text = tfidf.transform([cleaned_input_text])\noutput = ovr_knn.predict(vectorized_input_text)[0]\n\nprint(output)","metadata":{"execution":{"iopub.status.busy":"2024-09-25T16:04:33.227904Z","iopub.execute_input":"2024-09-25T16:04:33.228398Z","iopub.status.idle":"2024-09-25T16:04:33.681176Z","shell.execute_reply.started":"2024-09-25T16:04:33.228354Z","shell.execute_reply":"2024-09-25T16:04:33.679976Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}